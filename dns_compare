#!/usr/bin/python
#
# dns_compare.py - Compare the data in a BIND zone file to the data being
#                  returned by an authoritative DNS server.

from optparse import OptionParser

import socket
import sys

try:
    import dns.resolver
    import dns.zone
    from dns.exception import DNSException
    from dns.rdataclass import IN
    from dns.rdatatype import SOA, NS, CNAME, A
except ImportError:
    print("Please install dnspython:")
    print("$ sudo pip install dnspython")
    sys.exit(1)


if __name__ == '__main__':
    parser = OptionParser()
    # required options
    parser.add_option("-z", "--zone", dest="zone", metavar="DOMAIN",
                      help="name of the domain we're checking "
                           "(eg: domain.com)")
    parser.add_option("-f", "--file", dest="zonefile", metavar="FILE",
                      help="zone file to load records from")
    parser.add_option("-s", "--server", dest="nameserver", metavar="HOST",
                      help="DNS server to compare zone file against")
    # optional ... options
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true",
                      default=False,
                      help="print detailed results of each action")
    parser.add_option("-a", "--soa", dest="compare_soa", action="store_true",
                      default=False,
                      help="compare SOA records (default: false)")
    parser.add_option("-n", "--ns", dest="compare_ns", action="store_true",
                      default=False,
                      help="compare NS records (default: false)")
    parser.add_option("-t", "--ttl", dest="compare_ttl", action="store_false",
                      default=True,
                      help="compare TTL values (default: true)")
    parser.add_option("-c", "--cname", dest="lookup_cnames",
                      action="store_true", default=False,
                      help="lookup cname-values that do not match "
                           "(default: false)")
    (opts, remaining_args) = parser.parse_args()

    # check for required options
    if opts.zone is None or opts.zonefile is None or opts.nameserver is None:
        print("Error: required arguments: --zone, --file, --server")
        sys.exit(2)

    z = dns.zone.from_file(opts.zonefile, origin=opts.zone, relativize=False)

    r = dns.resolver.Resolver(configure=False)
    try:
        r.nameservers = socket.gethostbyname_ex(opts.nameserver)[2]
    except socket.error:
        print("Error: could not resolve 'host' %s" % opts.nameserver)
        sys.exit(3)

    matches = 0
    cnamematches = 0
    mismatches = 0
    for (name, rdataset) in z.iterate_rdatasets():
        if rdataset.rdtype == SOA and not opts.compare_soa:
            continue
        if rdataset.rdtype == NS and not opts.compare_ns:
            continue

        match = False
        result = None
        try:
            ans = r.resolve(name, rdataset.rdtype, rdataset.rdclass)
            result = ans.rrset.to_rdataset()
            if result == rdataset:
                if opts.compare_ttl:
                    if result.ttl == rdataset.ttl:
                        match = True
                else:
                    match = True
        except DNSException:
            pass

        if opts.lookup_cnames and match is False and result is None and \
                rdataset.rdtype == CNAME and \
                rdataset.rdclass == IN:
            ans_a = r.query(name, A, IN)
            result_a = ans_a.rrset.to_rdataset()
            if ans_a is not None:
                ans_cname = r.query(rdataset[0].target, A, IN)
                result_cname = ans_cname.rrset.to_rdataset()
                print("----")
                if result_cname == result_a:
                    print("(%s) query: %s" % ("CName-Match", name))
                    cnamematches += 1
                else:
                    print("(%s) query: %s" % ("MIS-Match", name))
                    mismatches += 1
                print("Expected: ", rdataset, ' (', result_cname, ')')
                print("Received: ", result_a)
                pass

        if opts.verbose:
            description = 'Match' if match else 'MIS-MATCH'
            print("----")
            print("(%s) query: %s" % (description, name))
            if result is not None and len(result) > 1:
                print("Expected:")
                print(rdataset)
                print("Received: ")
                print(result)
            else:
                print("Expected: ", rdataset)
                print("Received: ", result)

        if match:
            if not opts.verbose:
                sys.stdout.write('.')
                sys.stdout.flush()
            matches += 1
        else:
            if not opts.verbose:
                sys.stdout.write('X')
                print("\n(MIS-MATCH) query: %s" % name)
                if result is not None and len(result) > 1:
                    print("Expected:")
                    print(rdataset)
                    print("Received: ")
                    print(result)
                else:
                    print("Expected: ", rdataset)
                    print("Received: ", result)
                sys.stdout.flush()
            mismatches += 1
    print("done")

    print("\nResults:")
    print("Matches:       ", matches)
    if opts.lookup_cnames and cnamematches > 0:
        print("CName-matches: ", cnamematches)
    print("Mis-matches:   ", mismatches)
